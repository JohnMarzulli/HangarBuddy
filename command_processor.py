""" Contains the response generated by a command request. """

import sys
import time
import Queue
from multiprocessing import Queue as MPQueue
import serial  # Requires "pyserial"
import text
from fona_manager import FonaManager
from Sensors import Sensors
from RelayController import RelayManager
from lib.recurring_task import RecurringTask
import lib.utilities as utilities
import lib.local_debug as local_debug
from lib.logger import Logger

VALID_COMMANDS = {text.HEATER_OFF,
                  text.HEATER_ON,
                  text.PI_WARMER_OFF,
                  text.PI_WARMER_RESTART,
                  text.STATUS,
                  text.HELP}


class CommandResponse(object):
    """ Object to return a command response. """

    def get_command(self):
        """ Returns the command. """
        return self.__command__

    def get_message(self):
        """ Returns the message """
        if self.__message__ is None:
            return ""

        return self.__message__

    def __init__(self, command, message):
        if command in VALID_COMMANDS:
            self.__command__ = command
        else:
            self.__command__ = text.HELP

        self.__message__ = message


class CommandProcessor(object):
    """
    Class to control a power relay based on SMS commands.
    """

    def run_pi_warmer(self):
        """
        Service loop to run the PiWarmer
        """
        self.logger.log_info_message('Press Ctrl-C to quit.')

        # This can be safely used off the main thread.
        # and writes into the MPqueue...
        # It kicks off every 30 seconds

        RecurringTask("monitor_gas_sensor", 30,
                      self.__monitor_gas_sensor__, self.logger)

        RecurringTask("battery_check", 60 * 5,
                      self.__monitor_fona_health__, self.logger)

        while True:
            self.__run_servicer__(self.__service_gas_sensor_queue__,
                                  "Gas sensor queue")
            self.relay_controller.update()
            self.__run_servicer__(self.__process_pending_text_messages__,
                                  "Incoming request queue")
            self.fona_manager.update()

    def is_gas_detected(self):
        """ Returns True if gas is detected. """
        if self.__sensors__.current_gas_sensor_reading is not None:
            return self.__sensors__.current_gas_sensor_reading.is_gas_detected

        return False

    def is_allowed_phone_number(self, phone_number):
        """ Returns True if the phone number is allowed in the whitelist. """

        if phone_number is None:
            return False

        for allowed_number in self.configuration.allowed_phone_numbers:
            self.logger.log_info_message(
                "Checking " + phone_number + " against " + allowed_number)
            # Handle phone numbers that start with "1"... sometimes
            if allowed_number in phone_number or phone_number in allowed_number:
                self.logger.log_info_message(phone_number + " is allowed")
                return True

        self.logger.log_info_message(phone_number + " is denied")
        return False

    def __init__(self, configuration, logger):
        """ Initialize the object. """

        self.configuration = configuration
        self.logger = logger
        self.__is_gas_detected__ = False
        self.__system_start_time__ = time.time()
        self.__sensors__ = Sensors(configuration)

        serial_connection = self.__initialize_modem__()
        if serial_connection is None and not local_debug.is_debug():
            self.logger.log_warning_message(
                "Unable to initialize serial connection, quiting.")
            sys.exit()

        self.fona_manager = FonaManager(self.logger,
                                        serial_connection,
                                        self.configuration.cell_power_status_pin,
                                        self.configuration.cell_ring_indicator_pin)

        # create heater relay instance
        self.relay_controller = RelayManager(configuration, logger,
                                             self.__heater_turned_on__,
                                             self.__heater_turned_off__,
                                             self.__heater_max_time_off__)
        self.gas_sensor_queue = MPQueue()

        self.logger.log_info_message(
            "Starting SMS monitoring and heater service")
        self.__clear_existing_messages__()

        self.logger.log_info_message("Begin monitoring for SMS messages")
        self.__queue_message_to_all_numbers__("piWarmer monitoring started."
                                              + "\n" + self.__get_help_status__())
        self.__queue_message_to_all_numbers__(self.__get_status__())

    def __clear_existing_messages__(self):
        """ Clear all of the existing messages off tdhe SIM card.
        Send a message if we did. """
        # clear out all the text messages currently stored on the SIM card.
        # We don't want old messages being processed
        # dont send out a confirmation to these numbers because we are
        # just deleting them and not processing them
        num_deleted = self.fona_manager.delete_messages()
        if num_deleted > 0:
            for phone_number in self.configuration.allowed_phone_numbers:
                self.__queue_message__(phone_number,
                                       "Old or unprocessed message(s) found on SIM Card."
                                       + " Deleting...")
            self.logger.log_info_message(
                str(num_deleted) + " old message cleared from SIM Card")

    def __get_heater_status__(self):
        """
        Returns the status of the heater/relay.
        """
        if self.relay_controller is None:
            return "Relay not detected."

        status_text = "Heater is "

        if self.relay_controller.is_relay_on():
            status_text += text.HEATER_ON + ". "
            status_text += self.relay_controller.get_heater_time_remaining()
        else:
            status_text += text.HEATER_OFF

        status_text += "."

        return status_text

    def __get_fona_status__(self):
        """
        Returns the status of the Fona.
        ... both the signal and battery ...
        """
        cbc = self.fona_manager.battery_condition()
        signal = self.fona_manager.signal_strength()

        status = "Signal strength is " + str(signal.get_signal_strength()) \
                 + "(" + signal.classify_strength() + ")" \
                 + ", battery at " + str(cbc.battery_percent) + "%, "

        if not cbc.is_battery_ok():
            status += "LOW BATTERY."

        return status

    def __get_gas_sensor_status__(self):
        """
        Returns the status text for the gas sensor.
        """

        if self.__sensors__.current_gas_sensor_reading is None \
                or not self.configuration.is_mq2_enabled:
            return "Gas sensor NOT enabled."

        status_text = "Gas sensor enabled, current reading=" + \
            str(self.__sensors__.current_gas_sensor_reading.current_value)

        if self.__sensors__.current_gas_sensor_reading.is_gas_detected:
            status_text += ". DANGER! GAS DETECTED!"
        else:
            status_text += "."

        return status_text

    def __get_temp_probe_status__(self):
        """
        Returns the status of the temperature probe.
        """

        if self.__sensors__.current_temperature_sensor_reading is not None:
            return "Temperature is " \
                   + str(self.__sensors__.current_temperature_sensor_reading) + "F"

        return "Temp probe not enabled."

    def __get_light_status__(self):
        """
        Classifies the hangar brightness.
        """

        if self.__sensors__.current_light_sensor_reading is not None:
            status = "Hangar has " + \
                     str(int(self.__sensors__.current_light_sensor_reading.lux)) + \
                     " lumens of light.\n"
            status += "Hangar is "
            brightness = "Bright. Did you leave the lights on?"

            if self.__sensors__.current_light_sensor_reading.lux <= self.configuration.hangar_dark:
                brightness = "dark."
            elif self.__sensors__.current_light_sensor_reading.lux <= self.configuration.hangar_dim:
                brightness = "dim."
            elif self.__sensors__.current_light_sensor_reading.lux <= self.configuration.hangar_lit:
                brightness = "lit."

            status += brightness

            return status

        return "Light sensor not enabled."

    def __get_status__(self):
        """
        Returns the status of the piWarmer.
        """

        uptime = time.time() - self.__system_start_time__

        status = self.__get_heater_status__() + "\n"
        status += self.__get_gas_sensor_status__() + "\n"
        status += self.__get_light_status__() + "\n"
        status += self.__get_temp_probe_status__() + "\n"
        status += self.__get_fona_status__()

        if uptime > 60:
            status += "\nSystem has been up for " + \
                utilities.get_time_text(uptime)

        return status

    def __heater_turned_on__(self):
        """
        Callback that signals the relay turned the heater on.
        """
        self.__queue_message_to_all_numbers__(
            "Heater turned  " + text.HEATER_ON + ".")

    def __heater_turned_off__(self):
        """
        Callback that signals the relay turned the heater off.
        """
        self.__queue_message_to_all_numbers__(
            "Heater turned  " + text.HEATER_OFF + ".")

    def __heater_max_time_off__(self):
        """
        Callback that signals the relay turned the heater off due to the timer.
        """
        self.__queue_message_to_all_numbers__(
            "Heater turned  " + text.HEATER_OFF + " due to timer.")

    def __get_help_status__(self):
        """
        Returns the message for help.
        """
        return "To control the piWarmer text ON, OFF, STATUS, HELP, QUIT, RESTART, or SHUTDOWN"

    def __queue_message__(self, phone_number, message):
        """
        Puts a request to send a message into the queue.
        """
        if self.fona_manager is not None and phone_number is not None and message is not None:
            self.logger.log_info_message(
                "MSG - " + phone_number + " : " + utilities.escape(message))
            self.fona_manager.send_message(phone_number, message)

            return True

        return False

    def __queue_message_to_all_numbers__(self, message):
        """
        Puts a request to send a message to all numbers into the queue.
        """

        for phone_number in self.configuration.allowed_phone_numbers:
            self.__queue_message__(phone_number, message)

        return message

    def __handle_on_request__(self, phone_number):
        """ Handle a request to turn on. """

        if phone_number is None:
            return CommandResponse(text.ERROR,
                                   "Phone number was empty.")

        self.logger.log_info_message(
            "Received ON request from " + phone_number)

        if self.relay_controller.is_relay_on():
            return CommandResponse(text.NOOP,
                                   "Heater is already ON, "
                                   + self.relay_controller.get_heater_time_remaining())

        if self.is_gas_detected():
            return CommandResponse(text.HEATER_OFF,
                                   "Gas warning. Not turning heater on")

        return CommandResponse(text.HEATER_ON,
                               "Heater turning on for "
                               + str(self.configuration.max_minutes_to_run)
                               + " minutes.")

    def __handle_off_request__(self, phone_number):
        """ Handle a request to turn off. """

        self.logger.log_info_message(
            "Received OFF request from " + phone_number)

        if self.relay_controller.is_relay_on():
            try:
                return CommandResponse(text.HEATER_OFF,
                                       "Turning heater off with "
                                       + self.relay_controller.get_heater_time_remaining())
            except:
                return CommandResponse(text.ERROR,
                                       "Issue turning Heater OFF")

        return CommandResponse(text.NOOP,
                               "Heater is already OFF")

    def __handle_status_request__(self, phone_number):
        """
        Handle a status request.
        """
        self.logger.log_info_message(
            "Received STATUS request from " + phone_number)

        return CommandResponse(text.STATUS, self.__get_status__())

    def __handle_help_request__(self, phone_number):
        """
        Handle a help request.
        """
        self.logger.log_info_message(
            "Received HELP request from " + phone_number)

        return CommandResponse(text.STATUS, self.__get_help_status__())

    def __get_command_response__(self, message, phone_number):
        """
        Returns a command response based on the message.
        """
        if "on" in message:
            return self.__handle_on_request__(phone_number)
        elif "off" in message:
            return self.__handle_off_request__(phone_number)
        elif "quit" in message:
            sys.exit()
        elif "status" in message:
            return self.__handle_status_request__(phone_number)
        elif "help" in message:
            return self.__handle_help_request__(phone_number)
        elif "restart" in message:
            self.logger.log_info_message("Go restart request")
            return CommandResponse(text.PI_WARMER_RESTART,
                                   "Restart request from " + phone_number)
        elif "shutdown" in message:
            return CommandResponse(text.PI_WARMER_OFF,
                                   "Received SHUTDOWN request from "
                                   + phone_number)

        return CommandResponse(text.HELP, "COMMANDS: ON, OFF, STATUS, QUIT, SHUTDOWN")

    def __execute_command__(self, command_response):
        """ Executes the action the controller has determined. """
        # The commands "Help", "Status", and "NoOp"
        # only send responses back to the caller
        # and do not change the heater relay
        # or the Pi
        if command_response.get_command() == text.PI_WARMER_OFF:
            try:
                self.__queue_message_to_all_numbers__(
                    "Shutting down Raspberry Pi.")
                self.__shutdown__()

                return True
            except:
                self.logger.log_warning_message(
                    "CR: Issue shutting down Raspberry Pi")
        elif command_response.get_command() == text.PI_WARMER_RESTART:
            try:
                self.__queue_message_to_all_numbers__("Attempting restart")
                self.__restart__()

                return True
            except:
                self.logger.log_warning_message(
                    "CR: Issue restarting")
        elif command_response.get_command() == text.HEATER_OFF:
            self.logger.log_info_message("CR: Turning heater OFF")
            self.relay_controller.turn_off()

            return True
        elif command_response.get_command() == text.HEATER_ON:
            self.logger.log_info_message("CR: Turning heater ON")
            self.relay_controller.turn_on()

        return False

    def __process_message__(self, message, phone_number):
        """
        Process a SMS message/command.
        """

        # TODO - Figure out what LOCAL time the message was sent
        #        and ignore it if it is too old.

        message = message.lower()
        self.logger.log_info_message("Processing message:" + message)

        phone_number = utilities.get_cleaned_phone_number(phone_number)

        # check to see if this is an allowed phone number
        if not self.is_allowed_phone_number(phone_number):
            unauth_message = "Received unauthorized SMS from " + phone_number
            return self.__queue_message_to_all_numbers__(unauth_message)

        if len(phone_number) < 7:
            invalid_number_message = "Attempt from invalid phone number " + \
                phone_number + " received."
            return self.__queue_message_to_all_numbers__(invalid_number_message)

        message_length = len(message)
        if message_length < 1 or message_length > 32:
            invalid_message = "Message was invalid length."
            self.__queue_message__(
                phone_number, invalid_message)
            return self.logger.log_warning_message(invalid_message)

        command_response = self.__get_command_response__(
            message, phone_number)
        self.logger.log_info_message("Got command response")
        state_changed = self.__execute_command__(command_response)
        self.logger.log_info_message("executed command.")

        self.__queue_message__(
            phone_number, command_response.get_message())
        self.logger.log_info_message(
            "Sent message: " + command_response.get_message() + " to " + phone_number)

        return command_response.get_message(), state_changed

    def __restart__(self):
        """
        Restarts the Pi
        """
        self.logger.log_info_message("RESTARTING. Turning off relay")
        self.relay_controller.turn_off()
        utilities.restart()

    def __shutdown__(self):
        """
        Shuts down the Pi
        """
        self.logger.log_info_message("SHUTDOWN: Turning off relay.")
        self.relay_controller.turn_off()

        self.logger.log_info_message("SHUTDOWN: Shutting down piWarmer.")
        utilities.shutdown()

    def __clear_queue__(self, queue):
        """
        Clears a given queue.
        """
        if queue is None:
            return False

        while not queue.empty():
            self.logger.log_info_message("cleared message from queue.")
            queue.get()

    def __monitor_gas_sensor__(self):
        """
        Monitor the Gas Sensors. Sends a warning message if gas is detected.
        """

        # Since it is not enabled... then no reason to every
        # try again during this run
        if self.__sensors__.current_gas_sensor_reading is None:
            return

        detected = self.__sensors__.current_gas_sensor_reading.is_gas_detected
        current_level = self.__sensors__.current_gas_sensor_reading.current_value

        self.logger.log_info_message("Detected: " + str(detected) +
                                     ", Level=" + str(current_level))

        # If gas is detected, send an immediate warning to
        # all of the phone numberss
        if detected:
            self.__clear_queue__(self.gas_sensor_queue)

            status = "WARNING!! GAS DETECTED!!! Level = " + \
                str(current_level)

            if self.relay_controller.is_relay_on():
                status += ", TURNING HEATER OFF."
                # clear the queue if it has a bunch of no warnings in it

            self.logger.log_warning_message(status)
            self.gas_sensor_queue.put(
                text.GAS_WARNING + ", level=" + str(current_level))
            self.logger.heater_queue.put(text.HEATER_OFF)
            self.__queue_message_to_all_numbers__(status)
        else:
            self.logger.log_info_message("Sending OK into queue", False)
            self.gas_sensor_queue.put(
                text.GAS_OK + ", level=" + str(current_level))

    def __initialize_modem__(self, retries=4, seconds_between_retries=10):
        """
        Attempts to initialize the modem over the serial port.
        """

        serial_connection = None

        if local_debug.is_debug():
            return None

        while retries > 0 and serial_connection is None:
            try:
                self.logger.log_info_message(
                    "Opening on " + self.configuration.cell_serial_port)

                serial_connection = serial.Serial(
                    self.configuration.cell_serial_port,
                    self.configuration.cell_baud_rate)
            except:
                self.logger.log_warning_message(
                    "SERIAL DEVICE NOT LOCATED."
                    + " Try changing /dev/ttyUSB0 to different USB port"
                    + " (like /dev/ttyUSB1) in configuration file or"
                    + " check to make sure device is connected correctly")

                # wait 60 seconds and check again
                time.sleep(seconds_between_retries)

            retries -= 1

        return serial_connection

    def __service_gas_sensor_queue__(self):
        """
        Runs the service code for messages coming
        from the gas sensor.
        """

        try:
            while not self.gas_sensor_queue.empty():
                gas_sensor_status = self.gas_sensor_queue.get()

                if gas_sensor_status is None:
                    self.logger.log_warning_message("Gas sensor was None.")
                else:
                    self.logger.log_info_message(
                        "Q:" + gas_sensor_status, False)

                if text.GAS_WARNING in gas_sensor_status:
                    self.__handle_gas_warning__(gas_sensor_status)
                elif text.GAS_OK in gas_sensor_status:
                    self.__handle_gas_ok__(gas_sensor_status)
        except Queue.Empty:
            pass

        return self.__is_gas_detected__

    def __handle_gas_ok__(self, gas_sensor_status):
        """
        Handle an "OK" message from the sensor.
        """

        if self.__is_gas_detected__:
            cleared_message = "Gas warning cleared. " + gas_sensor_status
            self.__queue_message_to_all_numbers__(cleared_message)
            self.logger.log_info_message(
                "Turning detected flag off.")
            self.__is_gas_detected__ = False

    def __handle_gas_warning__(self, gas_sensor_status):
        """
        Handle a gas warning from the gas sensor.
        """
        if not self.__is_gas_detected__:
            gas_status = gas_sensor_status

            if self.relay_controller.is_relay_on():
                gas_status += "SHUTTING HEATER DOWN"

            self.__queue_message_to_all_numbers__(gas_status)
            self.logger.log_warning_message(
                "Turning detected flag on.")
            self.__is_gas_detected__ = True

        # Force the heater off command no matter
        # what we think the status is.
        self.relay_controller.turn_off()

    def __process_pending_text_messages__(self):
        """
        Processes any messages sitting on the sim card.
        """
        # Check to see if the RI pin has been
        # tripped, or is it is time to poll
        # for messages.
        if not self.fona_manager.is_message_waiting():
            return False

        # Get the messages from the sim card
        messages = self.fona_manager.get_messages()
        total_message_count = len(messages)
        messages_processed_count = 0

        # TODO - Do I really want to process all of the pending
        #        messages? Should we check to see if a mesage
        #        changes the status of the system and then
        #        break the processing so the queue can then
        #        actually change the state?
        if total_message_count > 0:
            # TODO - Sort these messages so they are processed
            #        in the order they were sent.
            #        The order of reception by the GSM
            #        chip can be out of order.
            # TODO - Ignore really old messages
            for message in messages:
                messages_processed_count += 1
                self.fona_manager.delete_message(message)
                response, state_changed = self.__process_message__(
                    message.message_text, message.sender_number)
                self.logger.log_info_message(response)

                # If the command did something to the unit
                # stop processing other commands
                if state_changed:
                    break

            self.logger.log_info_message(
                "Found " + str(total_message_count)
                + " messages, processed " + str(messages_processed_count))

        return total_message_count > 0

    def __monitor_fona_health__(self):
        """
        Check to make sure the Fona battery and
        other health signals are OK.
        """

        cbc = self.fona_manager.battery_condition()

        self.logger.log_info_message("GSM Battery=" + str(cbc.get_percent_battery()) + "% Volts=" +
                                     str(cbc.get_capacity_remaining()))

        if not cbc.is_battery_ok():
            low_battery_message = "WARNING: LOW BATTERY for Fona. Currently " + \
                str(cbc.get_percent_battery()) + "%"
            self.__queue_message_to_all_numbers__(low_battery_message)
            self.logger.log_warning_message(low_battery_message)

    def __run_servicer__(self, service_callback, service_name):
        """
        Calls and handles something with a servicer.
        """

        if service_callback is None:
            self.logger.log_warning_message(
                "Unable to service " + service_name)

        try:
            service_callback()
        except KeyboardInterrupt:
            print "Stopping due to CTRL+C"
            exit()
        except:
            self.logger.log_warning_message(
                "Exception while servicing " + service_name)
            print "Error:", sys.exc_info()[0]


##################
### UNIT TESTS ###
##################


def test_invalid_command():
    """ Test invalid commands into the response. """
    command_response = CommandResponse("INVALID", "INVALID")
    assert command_response.get_command() == text.HELP
    assert command_response.get_message() == "INVALID"


def test_valid_commands():
    """ Test that valid commands come back as they should. """
    for command in VALID_COMMANDS:
        message = "2061234567 " + command + " message."
        print "Testing " + command + " " + message
        command_response = CommandResponse(command, message)
        assert command_response.get_command() == command
        assert command_response.get_message() == message


#############
# SELF TEST #
#############
if __name__ == '__main__':
    import doctest
    import logging
    import PiWarmerConfiguration

    print "Starting tests."

    doctest.testmod()
    CONFIG = PiWarmerConfiguration.PiWarmerConfiguration()

    CONTROLLER = CommandProcessor(CONFIG, Logger(logging.getLogger("Controller")))

    CONTROLLER.run_pi_warmer()

    print "Tests finished"
    exit()
